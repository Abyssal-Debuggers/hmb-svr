name: Release

on:
  workflow_dispatch:
    inputs:
      type:
        type: choice
        required: true
        default: next-patch
        description: "Versioning type"
        options:
          - "next-patch"
          - "next-minor"
          - "manual"
      version:
        type: string
        required: false
        description: "Version to set"
      title:
        type: string
        default: Auto Release
        description: "Release title"
      body:
        type: string
        default: Github Action auto released
        description: "Release body"

jobs:
  guess-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set_version.outputs.build_version }}
      tags: ${{ steps.tags.outputs.tags }}
    steps:
      - name: Assert manual type, but not set version
        if: ${{ github.event.inputs.type == 'manual' && github.event.inputs.version == '' }}
        run: |
          echo "::error ::Missing semicolon"
          exit 1
      - name: Checkout
        uses: actions/checkout@v3
      - uses: octokit/request-action@v2.x
        id: get_latest_release
        with:
          route: GET /repos/${{ github.repository }}/releases/latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Calculate latest next versions
        id: next_versions
        run: |
          version=${{ fromJson(steps.get_latest_release.outputs.data).tag_name }}
          major=$(echo "$version" | sed -E 's/^v([0-9]+)\.([0-9]+)\.([0-9]+)$/\1/')
          minor=$(echo "$version" | sed -E 's/^v([0-9]+)\.([0-9]+)\.([0-9]+)$/\2/')
          patch=$(echo "$version" | sed -E 's/^v([0-9]+)\.([0-9]+)\.([0-9]+)$/\3/')
          next_minor=$((minor + 1))
          next_patch=$((patch + 1))
          echo "next_minor_version=v${major}.${next_minor}.0" >> "$GITHUB_OUTPUT"
          echo "next_patch_version=v${major}.${minor}.${next_patch}" >> "$GITHUB_OUTPUT"
      - name: Set version
        id: set_version
        run: |
          next_version_type=${{ github.event.inputs.type }}
          manual_version=${{ github.event.inputs.version }}
          next_patch=${{ steps.next_versions.outputs.next_patch_version }}
          next_minor=${{ steps.next_versions.outputs.next_minor_version }}
          
          case $next_version_type in
            "next-patch")
              echo "build_version=$next_patch" >> "$GITHUB_OUTPUT"
              ;;
            "next-minor")
              echo "build_version=$next_minor" >> "$GITHUB_OUTPUT"
              ;;
            "manual")
              echo "build_version=$manual_version" >> "$GITHUB_OUTPUT"
              ;;
          esac
      - name: Set tags
        id: tags
        run: |
          version=${{ steps.set_version.outputs.build_version }}
          
          major=$(echo "$version" | sed -E 's/^v([0-9]+)\.([0-9]+)\.([0-9]+)(.*)$/\1/')
          minor=$(echo "$version" | sed -E 's/^v([0-9]+)\.([0-9]+)\.([0-9]+)(.*)$/\2/')
          patch=$(echo "$version" | sed -E 's/^v([0-9]+)\.([0-9]+)\.([0-9]+)(.*)$/\3/')
          lefts=$(echo "$version" | sed -E 's/^v([0-9]+)\.([0-9]+)\.([0-9]+)(.*)$/\4/')
          
          echo "tags<<EOF" >> "$GITHUB_OUTPUT"
          echo "$major.$minor.$patch"  >> "$GITHUB_OUTPUT"
          echo "$major.$minor"         >> "$GITHUB_OUTPUT"
          echo "$major"                >> "$GITHUB_OUTPUT"
          echo "latest"                >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"
      - name: Log
        run: |
          echo "::notice ::Version : ${{ steps.set_version.outputs.build_version }}"
          echo "::notice ::Tags : ${{ steps.tags.outputs.tags }}"

  docker-build:
    needs: [ guess-version ]
    uses: ./.github/workflows/docker-build.yml
    name: Build Docker (GHCR)
    with:
      tags: ${{ needs.guess-version.outputs.tags }}
    secrets: inherit

  release:
    runs-on: ubuntu-latest
    needs: [ guess-version, docker-build ]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.guess-version.outputs.version }}
          release_name: "Release ${{ needs.guess-version.outputs.version }} : ${{ github.event.inputs.title }}"
          body: ${{ github.event.inputs.body }}
